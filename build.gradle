buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        //Defaults to Java 8 & UTF-8 encoding
        classpath 'com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT'
        classpath group: 'com.google.guava', name: 'guava', version: '24.1.1-jre'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.10"
    id "org.jetbrains.kotlin.kapt" version "1.4.10"
}

apply plugin: 'idea'
apply plugin: 'forge'

repositories {
    maven {
        name = "gt"
        url = "https://gregtech.overminddl1.com/"
    }
}

version = "0.0.4"
group = "com.github.bartimaeusnek.modmixins"
archivesBaseName = "modmixins"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
}

configurations {
    // configuration that holds jars to include in the jar
    shade
    provided
    embedded
    compile.extendsFrom provided, embedded
}

dependencies {
    compileOnly "mods.railcraft:Railcraft_1.7.10:9.12.2.1:dev"
    compile "net.industrial-craft:industrialcraft-2:2.2.828-experimental:dev"
    compileOnly "thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev"
    compileOnly "com.azanor.baubles:Baubles:1.7.10-1.0.1.10:deobf"
    compileOnly "micdoodle8.mods:MicdoodleCore:1.7-3.0.12.504:Dev"
}

jar {
    getArchiveAppendix().value("${minecraft.version}")
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand(
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }

    // copy everything else, that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

idea.module.downloadJavadoc = true
idea.module.downloadSources = true
idea.module.inheritOutputDirs = true

//##########################################################################################################
//########################################    Mixin  Part   ################################################
//##########################################################################################################
def yourMixinConfig = 'mixins.modmixins.json'
def refMapForYourConfig = 'mixins.modmixins.refmap.json'

repositories {
    maven {
        name = "sponge"
        url = "http://repo.spongepowered.org/maven/"
    }
}

dependencies {
    kapt(group: 'com.google.guava', name: 'guava', version: '24.1.1-jre')
    kapt(group: 'com.google.code.gson', name: 'gson', version: '2.8.6')
    kapt(group: 'org.ow2.asm', name: 'asm-debug-all', version: '5.0.3')
    kapt('org.spongepowered:mixin:0.8-SNAPSHOT')
    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        // Mixin includes a lot of dependencies that are too up-to-date
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }
}

def refMap = "${tasks.compileJava.temporaryDir}" + File.separator + refMapForYourConfig

def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"

jar {
    from refMap
    manifest {
        attributes.put("TweakClass", "org.spongepowered.asm.launch.MixinTweaker")
        attributes.put("FMLCorePluginContainsFMLMod", true)
        attributes.put("ForceLoadAsMod", true)
        attributes.put("MixinConfigs", yourMixinConfig)
    }
}

kapt {
    correctErrorTypes = true
    javacOptions {
        option("-AreobfSrgFile=${tasks.reobf.srg}")
        option("-AoutSrgFile=${mixinSrg}")
        option("-AoutRefMapFile=${refMap}")
    }
}

reobf {
    addExtraSrgFile mixinSrg
}

afterEvaluate {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
		kotlinOptions {
            jvmTarget = '1.8'
        }
    }
}

sourceSets {
    main {
        output.resourcesDir = output.getClassesDirs().getFiles().stream().findAny().get()
        ext.refMap = refMapForYourConfig
    }
}
